unit Second;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls;

type
  {TForm1}
  TForm1 = class(TForm)
  private
    { Private declarations }
  public
    { Public declarations }
  end;

  { ICar Interface}
  ICar = Interface(IInterface)
   //мотоды доступа к полям
    function GetFirm   : String;
    function GetModel  : String;
    function GetEngine : String;
    function GetBody   : String;
    //4 поля
    property firm   : String read GetFirm;
    property model  : String read GetFirm;
    property engine : String read GetEngine;
    property body   : String read GetBody;
    //3 метода
    function GetEngineRotation(const Value: Boolean) : Boolean;
    function GetMove(const Value: Boolean)           : Boolean;
    function GetHeadlight(const Value: Boolean)      : Boolean;
  end;

  { TCar Class }
  TCar = Class(TInterfacedObject, ICar)
  private
    cFirm      : String;
    cModel     : String;
    cEngine    : String;
    cBody      : String;

    cColorBody : Byte;

    function GetFirm      : String;
    function GetModel     : String;
    function GetBody      : String;
    function GetEngine    : String;

    function GetColorBody : Byte;
    procedure SetColorBody(const Value: Byte);

  public
    property firm      : String read GetFirm;
    property model     : String read GetModel;
    property engine    : String read GetEngine;
    property body      : String read GetBody;
    property colorBody : Byte read GetColorBody write SetColorBody;

    function GetEngineRotation(const Value: Boolean) : Boolean;
    function GetMove(const Value: Boolean)           : Boolean;
    function GetHeadlight(const Value: Boolean)      : Boolean;

    procedure HereGoes();

    constructor Create(firm, model, enjine, body: String; colorBody: Byte);
  end;


var
  Form1: TForm1;

implementation

{$R *.dfm}


{ TCar }

constructor TCar.Create(firm, model, enjine, body: String; colorBody: Byte);
begin
   cFirm      := firm;
   cModel     := model;
   cEngine    := enjine;
   cBody      := body;
   cColorBody := colorBody;
end;

function TCar.GetBody: String;
begin
  Result := cBody;
end;

function TCar.GetColorBody: Byte;
begin
  Result := cColorBody;
end;

function TCar.GetEngine: String;
begin
  Result := cEngine;
end;

function TCar.GetEngineRotation(const Value: Boolean): Boolean;
begin
   if Value then Result := true;
   if Not(Value) then Result := false;
end;

function TCar.GetFirm: String;
begin
  Result := cFirm;
end;

function TCar.GetHeadlight(const Value: Boolean): Boolean;
begin
   if Value then Result := true;
   if Not(Value) then Result := false;
end;

function TCar.GetModel: String;
begin
  Result := cModel;
end;

function TCar.GetMove(const Value: Boolean): Boolean;
begin
  if Value then Result := true;
  if Not(Value) then Result := false;
end;


procedure TCar.HereGoes;
begin

end;

procedure TCar.SetColorBody(const Value: Byte);
begin
  cColorBody := Value;
end;



{ TForm1 }

end.
