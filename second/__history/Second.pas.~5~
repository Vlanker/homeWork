unit Second;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs;

type

  TForm1 = class(TForm)
  private
    { Private declarations }
  public
    { Public declarations }
  end;

  TEngine = (DIESEL, TURBO_DIESEL, ELECTRIC_MOTOR, HIBRID);
  TColorCoachbuilder = (WHITE, BLACK, RED, GREEN, BLUE);
  TCoachbuilder = (TRUCK, CAR, WAGGON, OFF_ROAD, BUS);
  TChassis = (FOUR, SIX, EIGHT, TEN);

  TAutomobile = class
  private
    function GetEngine: TEngine;
    procedure SetEngine(const Value: TEngine);
    function GetCoachbuilder: TColorCoachbuilder;
    procedure SetCoachbuilder(const Value: TColorCoachbuilder);
    function GetChassis: TChassis;
    function GetColorCoachbuilder: TColorCoachbuilder;
    procedure SetChassis(const Value: TChassis);
    procedure SetColorCoachbuilder(const Value: TColorCoachbuilder);

  public
    IsStarerEngine : Boolean = false;
    property Engine: TEngine read GetEngine write SetEngine;
    property Coachbuilder: TColorCoachbuilder read GetCoachbuilder 
                                            write SetCoachbuilder;
    property Chassis: TChassis read GetChassis write SetChassis;
    property ColorCoachbuilder: TColorCoachbuilder read GetColorCoachbuilder 
                                                 write SetColorCoachbuilder;

    constructor Create(Engine: TEngine; Coachbuilder: TCoachbuilder;
      Chassis: TChassis; ColorCoachbuilder: TColorCoachbuilder); override;

    function SetStartStopEngine(const Value: Boolean) : Boolean; 
    function MoveAutomobile() : Boolean;  
  end;


var
  Form1: TForm1;

implementation

{$R *.dfm}
{ TAutomobile }

{ TAutomobile }

constructor TAutomobile.Create(Engine: TEngine; Coachbuilder: TCoachbuilder;
  Chassis: TChassis; ColorCoachbuilder: TColorCoachbuilder);
begin
  inherited;
  self.Engine := Engine;
  self.Coachbuilder := Coachbuilder;
  self.Chassis := Chassis;
  self.ColorCoachbuilder := ColorCoachbuilder;
  
  ShowMessage('Aotomobile Create: Engine-' + Engine + 
              '; Coachbuilder-'+Coachbuilder +
              'Chassis-' + Chassis +
              '; Color Coachbuilder-' + ColorCoachbuilder);
end;

function TAutomobile.GetChassis: TChassis;
begin
  Result := Chassis;
end;

function TAutomobile.GetCoachbuilder: TColorCoachbuilder;
begin
  Result := ColorCoachbuilder;
end;

function TAutomobile.GetColorCoachbuilder: TColorCoachbuilder;
begin
  Result := ColorCoachbuilder;
end;

function TAutomobile.GetEngine: TEngine;
begin
  Result := Engine;
end;



procedure TAutomobile.SetChassis(const Value: TChassis);
begin
  Chassis := Value;
end;

procedure TAutomobile.SetCoachbuilder(const Value: TColorCoachbuilder);
begin
  Coachbuilder := Value;
end;

procedure TAutomobile.SetColorCoachbuilder(const Value: TColorCoachbuilder);
begin
  ColorCoachbuilder := Value;
end;

procedure TAutomobile.SetEngine(const Value: TEngine);
begin
  Engine := Value;
end;


function TAutomobile.SetStartStopEngine(const Value: Boolean): Boolean;
begin
  if Value then
  begin
    IsStarerEngine := true;
    ShowMessage('Engine Started!');
    Result :=  true;
  end;
  
  IsStarerEngine := false;
  ShowMessage('Engine Stoped!');
  Result := false;
end;

function TAutomobile.MoveAutomobile(): Boolean;
begin
   if IsStarerEngine then
   
end;

end.
