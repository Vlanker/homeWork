unit Second;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls;

type
  {TForm1}
  TForm1 = class(TForm)
  private
    { Private declarations }
  public
    { Public declarations }
  end;

  { ICar Interface}
  ICar = Interface(IInterface)
   //мотоды доступа к полям
    function GetFirm   : String;
    function GetModel  : String;
    function GetEngine : String;
    function GetBody   : String;
    //4 поля
    property firm   : String read GetFirm;
    property model  : String read GetFirm;
    property engine : String read GetEngine;
    property body   : String read GetBody;
    //3 метода
    function GetEngineRotation() : Boolean;
    function GetMove()           : Boolean;

    procedure SetPedalPressure(const Value: Boolean);
  end;

  { TCar Class }
  TCar = Class(TInterfacedObject, ICar)
  private
    cFirm   : String;
    cModel  : String;
    cEngine : String;
    cBody   : String;

    cEngineRotation : Boolean;

    function GetFirm   : String;
    function GetModel  : String;
    function GetBody   : String;
    function GetEngine : String;

  public
    property firm   : String read GetFirm;
    property model  : String read GetModel;
    property engine : String read GetEngine;
    property body   : String read GetBody;

    function GetEngineRotation() : Boolean;
    function GetMove()           : Boolean;
    procedure SetPedalPressure(const Value: Boolean);

    procedure SetHeadlight(const Value: Boolean);

    constructor Create();
  end;


var
  Form1: TForm1;

implementation

{$R *.dfm}


{ TCar }

constructor TCar.Create();
begin
   cFirm      := ';
   cModel     := model;
   cEngine    := enjine;
   cBody      := body;
   cEngineRotation := false;
end;

function TCar.GetBody: String;
begin
  Result := cBody;
end;



function TCar.GetEngine: String;
begin
  Result := cEngine;
end;

function TCar.GetEngineRotation(): Boolean;
begin
   Result := cEngineRotation;
end;

function TCar.GetFirm: String;
begin
  Result := cFirm;
end;

procedure TCar.SetHeadlight(const Value: Boolean);
begin
   if Value then
   begin
     ShowMessage('Фары Горят');
   end;
   if Not(Value) then
   begin
     ShowMessage('Фары Не горят');
   end;
end;

procedure TCar.SetPedalPressure(const Value: Boolean);
begin
   cEngineRotation := Value;
end;

function TCar.GetModel: String;
begin
  Result := cModel;
end;

function TCar.GetMove(): Boolean;
begin
  Result := GetEngineRotation;
end;

{ TForm1 }

end.
